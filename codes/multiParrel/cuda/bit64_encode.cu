#include "stdafx.h"
#include <time.h>
#include <fstream>
#include "../common/book.h"
#define DIM 32 * 1024

using namespace std;

//every time, deal with a 3 * 16 character.
#define MAXTHREAD = 4 * 32 * 32 * 1024;

__constant__  unsigned char sm_alphabet[] =
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

__constant__  unsigned char sm_decodeMap[256] =
{
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0x00 - 0x0f
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0x10 - 0x1f
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3e,0xff,0xff,0xff,0x3f,  // 0x20 - 0x2f
	0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0xff,0xff,0xff,0x3d,0xff,0xff,  // 0x30 - 0x3f
	0xff,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,  // 0x40 - 0x4f
	0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0xff,0xff,0xff,0xff,0xff,  // 0x50 - 0x5f
	0xff,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,  // 0x60 - 0x6f
	0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0xff,0xff,0xff,0xff,0xff,  // 0x70 - 0x7f
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0x80 - 0x8f
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0x90 - 0x9f
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0xa0 - 0xaf
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0xb0 - 0xbf
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0xc0 - 0xcf
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0xd0 - 0xdf
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0xe0 - 0xef
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,  // 0xf0 - 0xff
};

const string strInPath = "C:\\Junius\\personal\\multi_core parallel\\GPU CUDA\\hello\\input";
const string strOutPath = "C:\\Junius\\personal\\multi_core parallel\\GPU CUDA\\hello\\output";

__device__ void encode(char* a, char * b)
{
    *b     = sm_alphabet[(*(a) & 0xFC) >> 2];
    *(b+1) = sm_alphabet[((*(a) & 0x03) << 4) | ((*(a+1) & 0xF0) >> 4)];
    *(b+2) = sm_alphabet[((*(a+1) & 0x0F) << 2) | ((*(a+2) & 0xC0) >> 6)];
    *(b+3) = sm_alphabet[(*(a+2) & 0x3F)];
}
    
__global__ void kernel(char* a, char* b){    

    int tid = threadIdx.x + blockIdx.x * blockDim.x;
    //while (tid < 4 * 32 * 32 * 1024) {
    //int offset = tid * 3 * 8 * 8;
	int offset = tid * 3;
	char * i = a + offset;
   // char * j = b + (tid * 4 * 8 * 8);
	char * j = b + (tid * 4);
	int index = 0;
	//while(index < 16)
	{
		encode(i,j);
		//i += 3;
		//j += 4;
		//++index;
	}
    
    //tid += blockDim.x * gridDim.x;
   // }
 }

  int main( void ) {

    // capture the start time
    cudaEvent_t     start, stop;
    HANDLE_ERROR( cudaEventCreate( &start ) );
    HANDLE_ERROR( cudaEventCreate( &stop ) );
    HANDLE_ERROR( cudaEventRecord( start, 0 ) );
	// get stop time, and display the timing results

    
	int inFileLen;
	int outFileLen;
	char * inBuffer;
	char * outBuffer;

    char * dev_in;
    char * dev_out;

	ifstream inFile(strInPath, ifstream::in);
	ofstream outFile(strOutPath, ifstream::out);

    /*
	inFile.seekg(0,ios::end);
	inFileLen = inFile.tellg();
	inFile.seekg(0,ios::beg);
    */
    
    //inFileLen = 3 * 4 * 16 * 32 * 32 * 1024;
	inFileLen = 3 * 32 * 32;
	outFileLen = inFileLen * 4 / 3;

	inBuffer = new char [inFileLen];
	outBuffer = new char [outFileLen];
    inFile.read(inBuffer,inFileLen);

    cudaMalloc((void**)&dev_in,inFileLen );
    cudaMalloc((void**)&dev_out,outFileLen );
    
	cudaMemcpy(dev_in,inBuffer,inFileLen,cudaMemcpyHostToDevice);
	
    //kernel<<<32,32*1024>>>(dev_in,dev_out);

	kernel<<<32,32>>>(dev_in,dev_out);

    cudaMemcpy(outBuffer,dev_out,outFileLen,cudaMemcpyDeviceToHost);
    outFile.write(outBuffer,outFileLen);

	inFile.close();
	outFile.close();

    // get stop time, and display the timing results
    HANDLE_ERROR( cudaEventRecord( stop, 0 ) );
    HANDLE_ERROR( cudaEventSynchronize( stop ) );
    float   elapsedTime;
    HANDLE_ERROR( cudaEventElapsedTime( &elapsedTime,
                                        start, stop ) );
    printf( "Time to generate:  %3.1f ms\n", elapsedTime );
    
	getchar();
    
	delete [] inBuffer;
	delete [] outBuffer;
    return 0;
}

/*
int _tmain(int argc, _TCHAR* argv[])
{
	fstream txtFile(file_path, ios_base::in | ios_base::out | ios_base::out);
	if (! txtFile.is_open())
	{
		cout << "not open, exit" << endl;
		return 0;
	}

	for(int i = 0; i < 32 * 16; ++i)
		txtFile << "junius";
	txtFile.close();
	return 0;
}
*/

